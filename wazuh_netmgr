#!/bin/bash

# Must be run as root
if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root"
	exit 1
fi

# Global Variables
VERBOSE=1
NETMGR_MARKER_MAIN="Wazuh_Netmgr"
NETMGR_MARKER_NODE="Wazuh_Netmgr_Node"

# Internal functions
validate_ip() {
    [ $VERBOSE -eq 1 ] && echo "Validating ip..."

	local ip=$1
	if [[ $ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
		IFS='.' read -r -a octets <<< "$ip"
		for octet in "${octets[@]}"; do
			if ! [[ "$octet" -ge 0 && "$octet" -le 255 ]]; then
				return 1  # Invalid IP range
			fi
		done
		return 0  # Valid IP address
	else
		return 1  # Invalid IP format
	fi
}

validate_init(){
    [ $VERBOSE -eq 1 ] && echo "Validating initialization..."

	[ -f "$NETMGR_RSYSLOG_PATH" ] && grep -Eq "^[ ]*#[ ]*<$NETMGR_MARKER_MAIN>" "$NETMGR_RSYSLOG_PATH" && return 0 || return 1
}

validate_enable(){
    [ $VERBOSE -eq 1 ] && echo "Validating enable status..."

	grep -Eq '^\$UDPServerRun 514' "$NETMGR_RSYSLOG_PATH" && grep -Eq '^\$ModLoad imudp' "$NETMGR_RSYSLOG_PATH" && return 0 || return 1
}

validate_node_exist(){
    [ $VERBOSE -eq 1 ] && echo "Validating node registration..."

	local ip=$1
	grep -Eq "# $NETMGR_MARKER_NODE-$ip" "$NETMGR_RSYSLOG_PATH" && return 0 || return 1
}

netmgr_clean_node(){
	[ $VERBOSE -eq 1 ] && echo "Cleaning node with ip=$1..."
	local ip=$1
	local fullpath=""

	grep ";$ip;" "$NETMGR_DATA_PATH" | while IFS=';' read -r path ip name library method username password; do
		if [[ -z "$path" || "$path" == "#"* ]]; then
			continue
		fi
		fullpath="$NETMGR_LOG_PATH/$path"
		[ $VERBOSE -eq 1 ] && echo "Node log path is $fullpath."

		echo "" > "$fullpath"
		[ $VERBOSE -eq 1 ] && echo "Node cleaned."

	done
}

netmgr_clean_file(){
	[ $VERBOSE -eq 1 ] && echo "Cleaning logs with file=$1..."
	local file=$1
	local fullpath=""

	while IFS=';' read -r path ip name library method username password; do
		if [[ -z "$path" || "$path" == "#"* ]]; then
			continue
		fi
		fullpath="$NETMGR_LOG_PATH/$path"
		[ $VERBOSE -eq 1 ] && echo "Node log path is $fullpath."

		echo "" > "$fullpath"
		[ $VERBOSE -eq 1 ] && echo "Node cleaned."

	done < "$file"
}

netmgr_edit_node(){
	[ $VERBOSE -eq 1 ] && echo "Editing node to Wazuh with ip=$2..."
	local path=$1
	local ip=$2
	local name=$3
	local library=$4
	local method=$5
	local username=$6
	local password=$7
	local fullpath="$NETMGR_LOG_PATH/$path"
	local libpath="$NETMGR_LIB_PATH/$library"
	local line=$(grep ";$ip;" "$NETMGR_DATA_PATH")	
	local newline=""	

	[ $VERBOSE -eq 1 ] && echo "Initial line is [$line]"
	[ $VERBOSE -eq 1 ] && echo "Validating inputs..."
	if ! validate_ip "$ip"; then
		echo "Error: ip address $ip is invalid."
		return 1
	elif [ -z "$line" ]; then
		echo "Error: ip address $ip is unregistered."
		return 1
	elif [ ! -z "$library" ] && [ ! -f $libpath ]; then
		echo "Error: Library $libpath does not exist."
		return 1
	elif [ ! -z "$method" ]; then
		case "$method" in
		none)
			username="none"
			password="none"
			;;
		password)
			;;
		*)
			echo "Error: Method $method is invalid or not available."
			return 1
			;;
		esac
	elif [ -z "$path" ] && [ -z "$name" ] && [ -z "$library" ] && [ -z "$method" ] && [ -z "$username" ] && [ -z "$password" ]; then
		echo "Error: No change argument given"
		return 1
	fi

	IFS=';' read -r file_path file_ip file_name file_library file_method file_username file_password <<< "$line"

	local old_fullpath="$NETMGR_LOG_PATH/$file_path"
	local old_name="$file_name"
	file_path=${path:-$file_path}
	file_name=${name:-$file_name}
	file_library=${library:-$file_library}
	file_method=${method:-$file_method}
	file_username=${username:-$file_username}
	file_password=${password:-$file_password}

	newline="$file_path;$ip;$file_name;$file_library;$file_method;$file_username;$file_password"
	[ $VERBOSE -eq 1 ] && echo "New line is [$newline]"

	sed -i "s|.*;$ip;.*|$newline|" "$NETMGR_DATA_PATH"

	if [ ! -z "$path" ]; then
		[ $VERBOSE -eq 1 ] && echo "Editing path at rsyslog..."
		sed -i "/# $NETMGR_MARKER_NODE-$ip/,/# \/$NETMGR_MARKER_NODE-$ip/ s|if \$fromhost-ip startswith '$ip' then $old_fullpath|if \$fromhost-ip startswith '$ip' then $fullpath|" "$NETMGR_RSYSLOG_PATH"

		[ $VERBOSE -eq 1 ] && echo "Editing path at ossec..."
		sed -i "/<!-- $NETMGR_MARKER_NODE-$ip -->/,/<!-- \/$NETMGR_MARKER_NODE-$ip -->/ s|<location>$old_fullpath</location>|<location>$fullpath</location>|" "$WAZUH_CONF_PATH"

		[ $VERBOSE -eq 1 ] && echo "Creating folder in given path..."
		local dir=$(dirname "$fullpath")
		mkdir -p "$dir"

		[ $VERBOSE -eq 1 ] && echo "Creating file in given path..."
		touch $fullpath

		[ $VERBOSE -eq 1 ] && echo "Changing file ownership..."
		chown syslog:adm $fullpath

		[ $VERBOSE -eq 1 ] && echo "Path edited."
	fi

	if [ ! -z "$name" ] ; then
		[ $VERBOSE -eq 1 ] && echo "Editing name..."
		sed -i "/<!-- $NETMGR_MARKER_NODE-$ip -->/,/<!-- \/$NETMGR_MARKER_NODE-$ip -->/ s|<out_format>$old_name: \$(log)<\/out_format>|<out_format>$file_name: \$(log)<\/out_format>|" "$WAZUH_CONF_PATH"
		[ $VERBOSE -eq 1 ] && echo "Name edited."
	fi
}

netmgr_register_node(){
	[ $VERBOSE -eq 1 ] && echo "Adding node to Wazuh with path=$1 ip=$2 name=$3..."
	local path=$1
	local ip=$2
	local name=$3
	local library=$4
	local method=$5
	local username=$6
	local password=$7
	local fullpath=""
	local libpath=""

	if [ -z "$ip" ] || [ -z "$path" ] || [ -z "$name" ]; then
		echo "Error: ip address, path, and a name is required"
		return 1
	elif ! validate_ip "$ip"; then
		echo "Error: ip address $ip is invalid"
		return 1
	elif validate_node_exist "$ip"; then
		echo "Node $ip has already been registered"
		return 1
	elif [ "$method" != "none" ]; then
		[ $VERBOSE -eq 1 ] && echo "Loading node library..."
		libpath="$NETMGR_LIB_PATH/$library"

		if [ ! -f "$libpath" ]; then
			echo "Error: Library $libpath does not exist"
			return 1
		fi	

		(
			source "$libpath"

			[ $VERBOSE -eq 1 ] && echo "Gaining access to network appliance..."
			case "$method" in
			password)
				lib_register_password $ip $username $password
				;;
			*)
				echo "Error: Method $method is invalid or not available."
				return 1
				;;
			esac
		)
		[ $? -ne 0 ] && return $?
	fi

	fullpath="$NETMGR_LOG_PATH/$path"

	[ $VERBOSE -eq 1 ] && echo "
Adding node:
ip: $ip
path: $fullpath
name: $name
"

	[ $VERBOSE -eq 1 ] && echo "Adding rsyslog configuration..."
	sed -i "/# <$NETMGR_MARKER_NODE>/a# $NETMGR_MARKER_NODE-$ip\\
if \$fromhost-ip startswith '$ip' then $fullpath\\
& ~\\
# /$NETMGR_MARKER_NODE-$ip" "$NETMGR_RSYSLOG_PATH"

	[ $VERBOSE -eq 1 ] && echo "Creating folder in given path..."
	local dir=$(dirname "$fullpath")
	mkdir -p "$dir"

	[ $VERBOSE -eq 1 ] && echo "Creating file in given path..."
	touch $fullpath

	[ $VERBOSE -eq 1 ] && echo "Changing file ownership..."
	chown syslog:adm $fullpath

	[ $VERBOSE -eq 1 ] && echo "Adding ossec configuration..."
sed -i "/<!-- $NETMGR_MARKER_MAIN -->/,/<!-- \/$NETMGR_MARKER_MAIN -->/ { /<ossec_config>/a \
""<!-- $NETMGR_MARKER_NODE-$ip -->\\
  <localfile>\\
    <log_format>syslog</log_format>\\
    <location>$fullpath</location>\\
    <out_format>$name: \$(log)</out_format>\\
  </localfile>\\
<!-- /$NETMGR_MARKER_NODE-$ip -->""
}" "$WAZUH_CONF_PATH"

	[ $VERBOSE -eq 1 ] && echo "Adding node data..."
	echo "$path;$ip;$name;$library;$method;$username;$password" >> $NETMGR_DATA_PATH

	echo "Node $ip has been added."
}

netmgr_register_file(){
	[ $VERBOSE -eq 1 ] && echo "Adding node to Wazuh with file=$1..."
	local file=$1
	local success=0
	local total=0

	if [ ! -f "$file" ]; then
		echo "Error: Input file not found or is not a regular file."
		return 1
	fi

	while IFS=';' read -r path ip name library method username password; do
		if [[ -z "$path" || "$path" == "#"* ]]; then
			continue
		fi
		netmgr_register_node "$path" "$ip" "$name" "$library" "$method" "$username" "$password"
		[ $? -eq 0 ] && ((success++))
		((total++))

	done < "$file"

	echo "$success/$total Nodes from $file has been added."
}

netmgr_unregister_node(){
	[ $VERBOSE -eq 1 ] && echo "Removing node from Wazuh with ip=$2..."
	local path=$1
	local ip=$2
	local name=$3
	local library=$4
	local method=$5
	local username=$6
	local password=$7
	local fullpath=""

	if [ -z "$ip" ]; then
		echo "Error: ip address is required"
		return 1
	elif ! validate_ip "$ip"; then
		echo "Error: ip address $ip is invalid"
		return 1
	elif ! validate_node_exist "$ip"; then
		echo "Node $ip has already been unregistered"
		return 1
	elif [ "$method" != "none" ]; then
		[ $VERBOSE -eq 1 ] && echo "Loading node library..."
		libpath="$NETMGR_LIB_PATH/$library"

		if [ ! -f "$libpath" ]; then
			echo "Error: Library $libpath does not exist"
			return 1
		fi	

		(
			source "$libpath"

			[ $VERBOSE -eq 1 ] && echo "Gaining access to network appliance..."
			case "$method" in
			password)
				lib_unregister_password $ip $username $password
				;;
			*)
				echo "Error: Method $method is invalid or not available."
				return 1
				;;
			esac
		)
		[ $? -ne 0 ] && return $?
	fi

	fullpath="$NETMGR_LOG_PATH/$path"

	[ $VERBOSE -eq 1 ] && echo "Removing node from rsyslog configuration..."
	sed -i "/# $NETMGR_MARKER_NODE-$ip/,/# \/$NETMGR_MARKER_NODE-$ip/d" "$NETMGR_RSYSLOG_PATH"

	[ $VERBOSE -eq 1 ] && echo "Deleting node log file..."
	[ -f "$fullpath" ] && rm "$fullpath"
	
	[ $VERBOSE -eq 1 ] && echo "Removing node from ossec configuration..."
	sed -i "/<!-- $NETMGR_MARKER_NODE-$ip -->/,/<!-- \/$NETMGR_MARKER_NODE-$ip -->/d" "$WAZUH_CONF_PATH"

	[ $VERBOSE -eq 1 ] && echo "Deleting node from data..."
	sed "/;$ip;/d" "$NETMGR_DATA_PATH" > "${NETMGR_DATA_PATH}.tmp" && mv "${NETMGR_DATA_PATH}.tmp" "$NETMGR_DATA_PATH"

	echo "Node $ip has been removed."
}

netmgr_unregister_file(){
	[ $VERBOSE -eq 1 ] && echo "Removing node from Wazuh with file=$1..."
	local file=$1
	local success=0
	local total=0

	if [ ! -f "$file" ]; then
		echo "Error: Input file not found or is not a regular file."
		return 1
	fi

	while IFS=';' read -r path ip name library method username password; do
		if [[ -z "$path" || "$path" == "#"* ]]; then
			continue
		fi
		netmgr_unregister_node "$path" "$ip" "$name" "$library" "$method" "$username" "$password"
		[ $? -eq 0 ] && ((success++))
		((total++))
	done < "$file"

	echo "$success/$total Nodes from $file has been removed."
}


# Commands
func_show_help(){
	echo "
Usage: $0 [-s] [-c config]
Commands:
	init            Initializes Wazuh Netmanager environment
	reset           Uninitialize Wazuh Netmanager node and configurations
	reload          Reloads rsyslog and Wazuh Server (Agent or Manager)
	clean           Clean log files of a node
	status          Shows information of Wazuh Netmanager (Not wazuh itself)
	enable          Enables wazuh net logging
	disable         Disables wazuh net logging
	register        Registers a network node in wazuh
	unregister      Unregisters a network node in wazuh

Options:
	-h              Shows this help message
	-c <config>     Specifies configuration file
	-s              Enable silent mode


Note:
	This script does not change the network appliances and should be configured separately.
	" 	
}

func_init(){
	[ $VERBOSE -eq 1 ] && echo "Setting up Wazuh Netmanager"
	
	if validate_init; then
		echo "Wazuh Netmanager has been setup already."
	else
		[ $VERBOSE -eq 1 ] && echo "Setting up rsyslog configs..."

		{
		echo "# Configurations for Wazuh Netmanager, DO NOT MODIFY MANUALLY"
		echo "# <$NETMGR_MARKER_MAIN>"
		echo '# $ModLoad imudp'
		echo '# $UDPServerRun 514'
		echo ''
		echo "# <$NETMGR_MARKER_NODE>"
		} > "$NETMGR_RSYSLOG_PATH"

		[ $VERBOSE -eq 1 ] && echo "Setting up ossec configs..."
		{
		echo "<!-- $NETMGR_MARKER_MAIN -->"
		echo "<ossec_config>"
		echo "</ossec_config>"
		echo "<!-- /$NETMGR_MARKER_MAIN -->"
		} >> "$WAZUH_CONF_PATH"

		[ $VERBOSE -eq 1 ] && echo "Creating folder for data file..."
		local dir=$(dirname "$NETMGR_DATA_PATH")
		mkdir -p "$dir"

		[ $VERBOSE -eq 1 ] && echo "Creating data file..."
		touch "$NETMGR_DATA_PATH"

		echo "Wazuh Netmanager setup complete."
	fi
}

func_reset(){
	[ $VERBOSE -eq 1 ] && echo "Resetting Wazuh..."

	[ $VERBOSE -eq 1 ] && echo "Setting off all network appliances logging..."
	netmgr_unregister_file "$NETMGR_DATA_PATH"

	[ $VERBOSE -eq 1 ] && echo "Deleting Wazuh Netmanager rsyslog configs..."
	[ -f "$NETMGR_RSYSLOG_PATH" ] && rm $NETMGR_RSYSLOG_PATH

	[ $VERBOSE -eq 1 ] && echo "Deleting Wazuh Netmanager ossec configs..."
	sed -i "/<!-- $NETMGR_MARKER_MAIN -->/,/<!-- \/$NETMGR_MARKER_MAIN -->/d" "$WAZUH_CONF_PATH"
	
	[ $VERBOSE -eq 1 ] && echo "Deleting Netmanager ossec data..."
	[ -f "$NETMGR_DATA_PATH" ] && rm "$NETMGR_DATA_PATH"

	echo "Wazuh Netmanager has been reset. Use \"wazuh_netmgr reload\" for it to take effect."
}

func_clean(){
	[ $VERBOSE -eq 1 ] && echo "Cleaning node log files..."

	# Set opt index
	OPTIND=2

	local ip=""
	local file=""
	local all=0

	while getopts "h?ai:f:" opt; do
		case "$opt" in
		h|\?)
			echo "
Usage: wazuh_netmgr register [-i ip address] or [-f file path] or [-a]

Required:
	-i <ip address>     : The ip address of the added node
	-f <file path>      : The path for bulk removing logs
	-a                  : Cleans all log file

Example file format at ./data/wazuh_netmgr.data.example
" && exit 0;;
		a)	all=1				;;
		i)	ip=$OPTARG			;;
		f)	file=$OPTARG		;;
		esac
	done
	shift $((OPTIND-1))

	if [ $all -ne 0 ]; then
		if [ ! -z $file ] || [ ! -z $ip ]; then
			echo "Error: -a flag cannot be used at the same time with file or single entry flag"
			exit 1
		fi
		netmgr_clean_file "$NETMGR_DATA_PATH"
	elif [ ! -z "$file" ]; then
		if [ ! -z "$ip" ]; then 
			echo "Error: -f flag cannot be used at the same time with singular entry flag"
			exit 1
		fi
		netmgr_clean_file "$file"
		[ $? -ne 0 ] && exit $?

	elif [ ! -z "$ip" ]; then 
		netmgr_clean_node "$ip"
		[ $? -ne 0 ] && exit $?

	else
		echo "Error: Missing required arguments. Use -h for help."
		exit 1
	fi

	echo "Log cleaning complete."
}

func_status(){
	local initialized="False"
	local enabled="False"
	local node_count=0
	local counter=1	

	validate_init && initialized="True" || initialized="False"
	validate_enable && enabled="True" || enabled="False"
	node_count=$(grep -cE "# $NETMGR_MARKER_NODE-.+" "$NETMGR_RSYSLOG_PATH")

	echo "
Wazuh Netmanager status:
Initialized = $initialized
Enabled = $enabled
Node count = $node_count

Nodes:"
	while IFS=';' read -r path ip name library method username password; do
		if [[ -z "$path" || "$path" == "#"* ]]; then
			continue
		fi
		echo "$counter.
	Name: $name
	ip address: $ip
	logpath: $NETMGR_LOG_PATH/$path
	library: $library"

		((counter++))	
	done < "$NETMGR_DATA_PATH"

	echo ""
}

func_enable(){
	[ $VERBOSE -eq 1 ] && echo "Enabling wazuh net logging..."
   
	local count=0

	if grep -Eq '^[ ]*#[ ]*\$UDPServerRun 514' "$NETMGR_RSYSLOG_PATH"; then
		[ $VERBOSE -eq 1 ] && echo "ServerRun line is commented out" 
		sed -i 's/^[ ]*#[ ]*\$UDPServerRun 514/\$UDPServerRun 514/' "$NETMGR_RSYSLOG_PATH"  
	else
		((count++))
	fi

	if grep -Eq '^[ ]*#[ ]*\$ModLoad imudp' "$NETMGR_RSYSLOG_PATH"; then
		[ $VERBOSE -eq 1 ] && echo "ModLoad line is commented out" 
		sed -i 's/^[ ]*#[ ]*\$ModLoad imudp/\$ModLoad imudp/' "$NETMGR_RSYSLOG_PATH"
	else
		((count++))
	fi	
	
	if [ $count -eq 2 ]; then
		echo "Wazuh net logging has already been enabled."
	else
		echo "Wazuh net logging enabled. Use \"wazuh_netmgr reload\" for it to take effect."
	fi
}

func_disable(){
	[ $VERBOSE -eq 1 ] && echo "Disabling wazuh net logging..."

	local count=0

	if grep -Eq '^[ ]*\$ModLoad imudp' "$NETMGR_RSYSLOG_PATH"; then
		[ $VERBOSE -eq 1 ] && echo "Commenting ModLoad line"
		sed -i 's/^[ ]*\$ModLoad imudp/# \$ModLoad imudp/' "$NETMGR_RSYSLOG_PATH"
	else
		((count++))
	fi
	
	if grep -Eq '^[ ]*\$UDPServerRun 514' "$NETMGR_RSYSLOG_PATH"; then
		[ $VERBOSE -eq 1 ] && echo "Commenting ServerRun line"
		sed -i 's/^[ ]*\$UDPServerRun 514/# \$UDPServerRun 514/' "$NETMGR_RSYSLOG_PATH"
	else
		((count++))
	fi
	
	if [ $count -eq 2 ]; then
		echo "Wazuh net logging has already been disabled."
	else
		echo "Wazuh net logging disabled. Use \"wazuh_netmgr reload\" for it to take effect."
	fi
}

func_reload(){
	[ $VERBOSE -eq 1 ] && echo "Reloading Wazuh net..."
	echo "Note: Error of wazuh-agent can be ignored if node is a manager, likewise if error of wazuh-manager if node is an agent."
	
	[ $VERBOSE -eq 1 ] && echo "Reloading rsyslog..."
	systemctl restart rsyslog

	[ $VERBOSE -eq 1 ] && echo "Reloading Wazuh agent..."
	systemctl restart wazuh-agent

	[ $VERBOSE -eq 1 ] && echo "Reloading Wazuh manager..."
	systemctl restart wazuh-manager

	echo "Wazuh net reloaded."
}

func_register(){
	[ $VERBOSE -eq 1 ] && echo "Adding node to Wazuh..."

	# Set opt index
	OPTIND=2

	local path=""
	local ip=""
	local name=""
	local file=""
	local library=""
	local method=""
	local username=""
	local password=""

	while getopts "h?o:i:n:f:l:m:u:p:" opt; do
		case "$opt" in
		h|\?)
			echo "
Usage: wazuh_netmgr register [-o output path] [-i ip address] [-n name] or [-f file path]

Required:
	-o <output path>    : Specifies the path for incoming logs
	-i <ip address>     : The ip address of the added node
	-n <name>           : Name of the added node	
	or
	-f <file path>      : The path for bulk adding nodes

Example file format at ./data/wazuh_netmgr.data.example

Optional:
	-l <library>        : Library used for configuring the network appliance (default is none)
	-m <method>         : Authentication method
	-u <username>       : Username for password authentication
	-p <password>       : Password for password authentication

Authentication Methods:
	none                : Does not configure the network appliance (default)
	password            : Uses username and password
" && exit 0;;
		o)	path=$OPTARG		;;
		i)	ip=$OPTARG			;;
		n)	name=$OPTARG		;;
		f)	file=$OPTARG		;;
		l)	library=$OPTARG		;;
		m)	method=$OPTARG		;;
		u)	username=$OPTARG	;;
		p)	password=$OPTARG	;;
		esac
	done
	shift $((OPTIND-1))

	if [ ! -z "$file" ]; then
		if [ ! -z "$ip" ] || [ ! -z "$path" ] || [ ! -z "$name" ] || [ ! -z "$library" ] || [ ! -z "$method" ] || [ ! -z "$username" ] || [ ! -z "$password" ] ; then
			echo "Error: -f flag cannot be used at the same time with singular entry flags"
			exit 1
		fi
		netmgr_register_file "$file"
		[ $? -ne 0 ] && exit $?

	elif [ ! -z "$ip" ] && [ ! -z "$path" ] && [ ! -z "$name" ]; then
		if [ ! -z "$library" ]; then
			if [ "$method" == "password" ]; then
				if [ -z "$username" ] || [ -z "$password" ]; then
					echo "Error: -u username and -p password are necessary with -m method of password"
					exit 1
				fi
			fi
		else 
			library="none"
			username="none"
			password="none"
		fi
		netmgr_register_node "$path" "$ip" "$name" "$library" "$method" "$username" "$password"
		[ $? -ne 0 ] && exit $?

	else
		echo "Error: Missing required arguments. Use -h for help."
		exit 1
	fi

	echo "Registration complete. Use \"wazuh_netmgr reload\" for it to take effect."
}

func_unregister(){
	[ $VERBOSE -eq 1 ] && echo "Removing node from Wazuh..."

	# Set opt index
	OPTIND=2

	local ip=""
	local file=""

	while getopts "h?i:f:" opt; do
		case "$opt" in
		h|\?)
			echo "Usage: wazuh_netmgr unregister [-i ip address]" && exit 0;;
		i)	ip=$OPTARG		;;
		f)	file=$OPTARG	;;
		esac
	done
	shift $((OPTIND-1))

	if [ ! -z "$file" ]; then
		if [ ! -z "$ip" ]; then
			echo "Error: -f flag cannot be used at the same time with singular entry flags"
			exit 1
		fi
		netmgr_unregister_file "$file"
		[ $? -ne 0 ] && exit $?

	elif [ ! -z "$ip" ]; then
		grep ";$ip;" "$NETMGR_DATA_PATH" | while IFS=';' read -r path ip name library method username password; do
			if [[ -z "$path" || "$path" == "#"* ]]; then
				continue
			fi
			netmgr_unregister_node "$path" "$ip" "$name" "$library" "$method" "$username" "$password"
			[ $? -ne 0 ] && exit $?
		done
	else
		echo "Error: Missing required arguments. Use -h for help."
		exit 1
	fi

	echo "Unregistration complete. Use \"wazuh_netmgr reload\" for it to take effect."
}

func_edit(){
	[ $VERBOSE -eq 1 ] && echo "Editing node..."

	# Set opt index
	OPTIND=2

	local path=""
	local ip=""
	local name=""
	local file=""
	local library=""
	local method=""
	local username=""
	local password=""

	while getopts "h?o:i:n:l:m:u:p:" opt; do
		case "$opt" in
		h|\?)
			echo "
Usage: wazuh_netmgr edit [-i ip address]

Required:
	-i <ip address>     : The ip address of the added node

Optional:
	-o <output path>    : Specifies the path for incoming logs
	-n <name>           : Name of the added node	
	-l <library>        : Library used for configuring the network appliance (default is none)
	-m <method>         : Authentication method
	-u <username>       : Username for password authentication
	-p <password>       : Password for password authentication

Authentication Methods:
	none                : Does not configure the network appliance (default)
	password            : Uses username and password

Note:
	Changing path will not remove or move old logs to the new file
" && exit 0;;
		o)	path=$OPTARG		;;
		i)	ip=$OPTARG			;;
		n)	name=$OPTARG		;;
		l)	library=$OPTARG		;;
		m)	method=$OPTARG		;;
		u)	username=$OPTARG	;;
		p)	password=$OPTARG	;;
		esac
	done
	shift $((OPTIND-1))

	if [ ! -z "$ip" ]; then
		netmgr_edit_node "$path" "$ip" "$name" "$library" "$method" "$username" "$password"
		[ $? -ne 0 ] && exit $?

	else
		echo "Error: Missing required arguments. Use -h for help."
		exit 1
	fi

	echo "Edit complete. Use \"wazuh_netmgr reload\" for it to take effect."
}

# main
main(){
	local config="./etc/wazuh_netmgr.conf"
	local action=""

	# Set opt index
	OPTIND=1

	while getopts "h?sc:" opt; do
		case "$opt" in
		h|\?)	func_show_help && exit 0	;;
		s)		VERBOSE=0					;;
		c)		config=$OPTARG				;;
		esac
	done
	shift $((OPTIND-1))

	# Loads config
	if [ -f "$config" ]; then
		source "$config"
	else
		echo "Error: Configuration file $config not found or is not a regular file."
		exit 1
	fi

	action="$1"

	if [ "$action" != "init" ]; then
		if ! validate_init; then
			echo "Error: Wazuh Netmanager has not been initialized yet, initialize with \"wazuh_netmgr init\""
			exit 1
		fi
	fi

	case "$action" in
	"init")			func_init				;;
	"reset")		func_reset				;;
	"reload")		func_reload				;;
	"status")		func_status				;;
	"enable")		func_enable				;;
	"disable")		func_disable			;;
	"register")	 	func_register "$@"		;;
	"unregister")   func_unregister "$@"	;;
	"clean")		func_clean "$@"			;;
	"edit")			func_edit "$@"			;;
	*)				func_show_help			;;
	esac
}

main "$@"
