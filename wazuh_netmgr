#!/bin/bash

# Must be run as root
if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root"
	exit 1
fi

# Global Variables
VERBOSE=0
RSYSLOG_MARKER_MAIN="Wazuh_Netmgr"
RSYSLOG_MARKER_NODE="Nodes"

# Internal functions
validate_ip() {
	local ip=$1
	if [[ $ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
		IFS='.' read -r -a octets <<< "$ip"
		for octet in "${octets[@]}"; do
			if ! [[ "$octet" -ge 0 && "$octet" -le 255 ]]; then
				return 1  # Invalid IP range
			fi
		done
		return 0  # Valid IP address
	else
		return 1  # Invalid IP format
	fi
}

validate_init(){
	[ -f "$WAZUH_NETMGR_RSYSLOG_PATH" ] && grep -Eq "^[ ]*#[ ]*<$RSYSLOG_MARKER_MAIN>" "$WAZUH_NETMGR_RSYSLOG_PATH" && return 0 || return 1
}


# Commands
func_show_help(){
	echo "
Usage: $0 [-v] [-c config]
Commands:
	init			Initializes Wazuh Netmanager environment
	reset			Clears Wazuh Netmanager node and configurations
	status			Shows information of Wazuh Netmanager (Not wazuh itself)
	enable			Enables wazuh net logging (Basically opens port 514)
	disable			Disables wazuh net logging (Basically closes port 514)
	register		Registers a network node in wazuh
	unregister		Unregisters a network node in wazuh

Options:
	-h				Shows this help message
	-c <config>		Specifies configuration file
	-v				Enable Verbose mode


Note:
	This script does not change the network appliances and should be configured separately.
	" 	
}

func_init(){
	[ $VERBOSE -eq 1 ] && echo "Setting up Wazuh Netmanager"
	
	if validate_init; then
		echo "Wazuh Netmanager has been setup already."
	else
		[ $VERBOSE -eq 1 ] && echo "Setting up rsyslog configs..."

		{
		echo "# Configurations for Wazuh Netmanager, DO NOT MODIFY MANUALLY"
		echo "# <$RSYSLOG_MARKER_MAIN>"
		echo '# $ModLoad imudp'
		echo '# $UDPServerRun 514'
		echo ''
		echo "# <$RSYSLOG_MARKER_NODE>"
		} > "$WAZUH_NETMGR_RSYSLOG_PATH"

		[ $VERBOSE -eq 1 ] && echo "Setting up ossec configs..."
		{
		echo "<!-- $RSYSLOG_MARKER_MAIN -->"
		echo ""
		echo "<!-- /$RSYSLOG_MARKER_MAIN -->"
		} >> "$WAZUH_CONF_PATH"

		echo "Wazuh Netmanager setup complete."
	fi
}

func_reset(){
	[ $VERBOSE -eq 1 ] && echo "Resetting Wazuh..."

	[ $VERBOSE -eq 1 ] && echo "Deleting Wazuh Netmanager rsyslog configs..."
	[ -f "$WAZUH_NETMGR_RSYSLOG_PATH" ] && rm $WAZUH_NETMGR_RSYSLOG_PATH

	[ $VERBOSE -eq 1 ] && echo "Deleting Wazuh Netmanager ossec configs..."
	sed -i "/<!-- $RSYSLOG_MARKER_MAIN -->/,/<!-- \/$RSYSLOG_MARKER_MAIN -->/d" "$WAZUH_CONF_PATH"
	
	echo "Wazuh Netmanager has been reset."
}

func_status(){
	echo "Checking wazuh Netmanager status..."
}

func_enable(){
	[ $VERBOSE -eq 1 ] && echo "Enabling wazuh net logging..."
   
	local count=0

	if grep -Eq '^[ ]*#[ ]*\$UDPServerRun 514' "$WAZUH_NETMGR_RSYSLOG_PATH"; then
		[ $VERBOSE -eq 1 ] && echo "ServerRun line is commented out" 
		sed -i 's/^[ ]*#[ ]*\$UDPServerRun 514/\$UDPServerRun 514/' "$WAZUH_NETMGR_RSYSLOG_PATH"  
	else
		((count++))
	fi

	if grep -Eq '^[ ]*#[ ]*\$ModLoad imudp' "$WAZUH_NETMGR_RSYSLOG_PATH"; then
		[ $VERBOSE -eq 1 ] && echo "ModLoad line is commented out" 
		sed -i 's/^[ ]*#[ ]*\$ModLoad imudp/\$ModLoad imudp/' "$WAZUH_NETMGR_RSYSLOG_PATH"
	else
		((count++))
	fi	
	
	if [ $count -eq 2 ]; then
		echo "Wazuh net logging has already been enabled."
	else
		echo "Wazuh net logging enabled."
	fi
}

func_disable(){
	[ $VERBOSE -eq 1 ] && echo "Disabling wazuh net logging..."

	local count=0

	if grep -Eq '^[ ]*\$ModLoad imudp' "$WAZUH_NETMGR_RSYSLOG_PATH"; then
		[ $VERBOSE -eq 1 ] && echo "Commenting ModLoad line"
		sed -i 's/^[ ]*\$ModLoad imudp/# \$ModLoad imudp/' "$WAZUH_NETMGR_RSYSLOG_PATH"
	else
		((count++))
	fi
	
	if grep -Eq '^[ ]*\$UDPServerRun 514' "$WAZUH_NETMGR_RSYSLOG_PATH"; then
		[ $VERBOSE -eq 1 ] && echo "Commenting ServerRun line"
		sed -i 's/^[ ]*\$UDPServerRun 514/# \$UDPServerRun 514/' "$WAZUH_NETMGR_RSYSLOG_PATH"
	else
		((count++))
	fi
	
	if [ $count -eq 2 ]; then
		echo "Wazuh net logging has already been disabled."
	else
		echo "Wazuh net logging disabled."
	fi
}

func_register(){
	[ $VERBOSE -eq 1 ] && echo "Adding node to Wazuh..."

	# Set opt index
	OPTIND=2

	local path=""
	local ip=""
	local name=""

	while getopts "h?p:i:n:" opt; do
		case "$opt" in
		h|\?)
			echo "Usage: wazuh_netmgr register [-p log path] [-i ip address] [-n name]" && exit 0;;
		p)	path=$OPTARG	;;
		i)	ip=$OPTARG		;;
		n)	name=$OPTARG	;;
		esac
	done
	shift $((OPTIND-1))

	if [ -z "$ip" ] || [ -z "$path" ] || [ -z "$name" ]; then
		echo "Error: ip address, path, and a unique name is required"
		exit 1
	elif ! validate_ip "$ip"; then
		echo "Error: Invalid ip address argument"
		exit 1
	fi

	path="$WAZUH_NETMGR_LOG_PATH/$path"

	[ $VERBOSE -eq 1 ] && echo "
Adding node:
ip: $ip
path: $path
name: $name
"

	[ $VERBOSE -eq 1 ] && echo "Adding rsyslog configuration..."
	sed -i "/# <$RSYSLOG_MARKER_NODE>/aif \$fromhost-ip startswith '$ip' then $path\\
& ~" "$WAZUH_NETMGR_RSYSLOG_PATH"

	[ $VERBOSE -eq 1 ] echo "Creating file in given path..."
	touch $path

	[ $VERBOSE -eq 1 ] && echo "Changing file ownership..."
	chown syslog:adm $path

	[ $VERBOSE -eq 1 ] && echo "Restarting rsyslog..."
	# systemctl restart rsyslog

	[ $VERBOSE -eq 1 ] && echo "Adding ossec configuration"

	echo "Node has been added."	
}

func_unregister(){
	[ $VERBOSE -eq 1 ] && echo "Removing node from Wazuh..."
}


main(){
	local config="./wazuh_netmgr.conf"
	local action=""

	# Set opt index
	OPTIND=1

	while getopts "h?vc:" opt; do
		case "$opt" in
		h|\?)	func_show_help && exit 0	;;
		v)		VERBOSE=1					;;
		c)		config=$OPTARG				;;
		esac
	done
	shift $((OPTIND-1))

	# Loads config
	if [ -f "$config" ]; then
		source "$config"
	else
		echo "Error: Configuration file $config not found or is not a regular file."
		exit 1
	fi

	action="$1"

	if [ "$action" != "init" ]; then
		if ! validate_init; then
			echo "Error: Wazuh Netmanager has not been initialized yet, initialize with \"wazuh_netmgr init\""
			exit 1
		fi
	fi

	case "$action" in
	"init")			func_init				;;
	"reset")		func_reset				;;
	"status")		func_status				;;
	"enable")		func_enable				;;
	"disable")		func_disable			;;
	"register")	 	func_register "$@"		;;
	"unregister")   func_unregister "$@"	;;
	*)				func_show_help			;;
	esac
}

main "$@"
