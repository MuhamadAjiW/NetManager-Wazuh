#!/bin/bash

# Must be run as root
if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root"
	exit 1
fi

# Commands
func_show_help(){
    echo "Usage: $0 [-v] [-c config]"
    echo "
Commands:
	enable			Enables wazuh net logging (Basically opens port 514)
	disable			Disables wazuh net logging (Basically closes port 514)
	register		Registers a network node in wazuh
	unregister		Unregisters a network node in wazuh

Options:
	-h			Shows this help message
	-c <config>		Specifies configuration file
	-v			Enable Verbose mode


Note:
This script does not change the network appliances and should be configured separately.
	" 	
}

func_enable(){
    echo "Enabling wazuh net logging..."
   
    var_enable_count=0

    if grep -Eq '$ModLoad imudp' "$RSYSLOG_CONF_PATH"; then
        echo "ModLoad line not found"
        echo '$ModLoad imudp' >> "$RSYSLOG_CONF_PATH"
    elif grep -Eq '^[[:space:]]*#.*$ModLoad imudp' "$RSYSLOG_CONF_PATH"; then
        echo "ModLoad line is commented out" 
        sed -i '^[[:space:]]*#.*$ModLoad imudp/s/^#//' "$RSYSLOG_CONF_PATH"
    else
        ((var_enable_count++))
    fi
    
    if grep -Eq '$UDPServerRun 514' "$RSYSLOG_CONF_PATH"; then
        echo "ServerRun line not found"
        echo '$UDPServerRun 514' >> "$RSYSLOG_CONF_PATH"
    elif grep -Eq '^[[:space:]]*#.*$UDPServerRun 514' "$RSYSLOG_CONF_PATH"; then
        echo "ServerRun line is commented out" 
        sed -i '^[[:space:]]*#.*$UDPServerRun 514/s/^#//' "$RSYSLOG_CONF_PATH"  
    else
        ((var_enable_count++))
    fi
    
    if [ $var_enable_count -eq 2 ]; then
        echo "Wazuh net logging already enabled"
    else
        echo "Wazuh net logging enabled."
    fi
}

func_disable(){
    echo "Disabling wazuh net logging..."
}

func_register(){
	echo "Adding node to Wazuh..."
}

func_unregister(){
    echo "Removing node from Wazuh..."
}


main(){
    case "$action" in
    "enable")
        func_enable
        ;;
    "disable")
        func_disable
        ;;
    "register")
        func_register
        ;;
    "unregister")
        func_unregister
        ;;
    *)
        echo "Error: Invalid command provided"
        func_show_help
        exit 1
        ;;
    esac
}

# Initialize variables
OPTIND=1         # Reset in case getopts has been used previously in the shell.
verbose=0
action=""
config="./wazuh_netmgr.conf"

while getopts "h?vc:" opt; do
    case "$opt" in
    h|\?)
		func_show_help
		exit 0
		;;
    v)  verbose=1
		;;
    c) 	config=$OPTARG
		;;
    esac
done
shift $((OPTIND-1))

if [ $# -eq 0 ]; then
	echo "Error: No command provided."
	func_show_help
	exit 1
fi

# Check whether config file exists
if [ ! -f "$config" ]; then
	echo "Error: Configuration file $config not found or is not a regular file."
	exit 1
fi

action=$1
shift

# Loads config
source $config 

main
